---
description: General project guidelines and architecture for Food4Kids
globs:
  ["**/*.py", "**/*.ts", "**/*.tsx", "**/docker-compose.yml", "**/Dockerfile"]
alwaysApply: true
---

# Food4Kids Project Guidelines

## Architecture Overview

This is a full-stack web application with:

- **Backend**: FastAPI with Python, SQLModel for database models
- **Frontend**: React with TypeScript
- **Database**: PostgreSQL running in Docker container
- **Containerization**: Docker Compose for development environment

## Development Environment

- All services run in Docker containers
- Backend container: `f4k_backend`
- Database container: `f4k_db`
- Frontend container: `f4k_frontend`

## Key Conventions

- Use SQLModel for database models with proper type hints
- Follow FastAPI best practices for API routes
- Use TypeScript for all frontend code
- Maintain consistent naming conventions across the stack
- All database changes must go through Alembic migrations

## Code Quality Standards

### Python Backend

- **Type Safety**: Use mypy for static type checking. All functions must have proper type hints.
- **Code Style**: Use ruff for linting and formatting. Follow the configuration in `backend/python/pyproject.toml`.
- **Type Hints**: Always include return types and parameter types for functions and methods.
- **Imports**: Use absolute imports and organize them with ruff's isort integration.

### Development Workflow

Before committing:

1. Run `docker-compose exec backend ruff check .` to check for linting issues
2. Run `docker-compose exec backend ruff format .` to format code
3. Run `docker-compose exec backend mypy .` to check type safety
4. Run tests: `docker-compose exec backend python -m pytest`

## Testing

### Test Command

Run all tests with a single command:

```bash
docker-compose exec backend python -m pytest
```

### Code Quality Commands

```bash
# Backend quality checks
docker-compose exec backend ruff check --fix .  # Fix linting issues
docker-compose exec backend ruff format .       # Format code
docker-compose exec backend mypy .              # Type checking

# Combined quality check
docker-compose exec backend ruff check . && docker-compose exec backend ruff format --check . && docker-compose exec backend mypy .
```

## Container Commands

Start all services: `docker-compose up`
Access backend shell: `docker-compose exec backend sh`
Access database: `docker-compose exec db psql -U postgres -d f4k`

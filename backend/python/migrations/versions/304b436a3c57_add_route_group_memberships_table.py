"""Add route_group_memberships table

Revision ID: 304b436a3c57
Revises: 5244c9e0440d
Create Date: 2025-10-27 00:36:33.855491

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '304b436a3c57'
down_revision = '5244c9e0440d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin_info',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('admin_name', sa.String(length=100), nullable=False),
    sa.Column('default_cap', sa.Integer(), nullable=True),
    sa.Column('admin_phone', sa.String(length=100), nullable=False),
    sa.Column('admin_email', sa.String(), nullable=False),
    sa.Column('route_start_time', sa.Time(), nullable=True),
    sa.Column('warehouse_location', sa.String(), nullable=True),
    sa.Column('admin_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('admin_id')
    )
    op.create_table('drivers',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=254), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('license_plate', sa.String(length=20), nullable=False),
    sa.Column('car_make_model', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.String(length=1024), nullable=False),
    sa.Column('driver_id', sa.Uuid(), nullable=False),
    sa.Column('auth_id', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_index(op.f('ix_drivers_auth_id'), 'drivers', ['auth_id'], unique=True)
    op.create_index(op.f('ix_drivers_driver_id'), 'drivers', ['driver_id'], unique=False)
    op.create_index(op.f('ix_drivers_email'), 'drivers', ['email'], unique=True)
    op.create_table('location_groups',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('notes', sa.String(), nullable=False),
    sa.Column('location_group_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('location_group_id')
    )
    op.create_index(op.f('ix_location_groups_name'), 'location_groups', ['name'], unique=True)
    op.create_table('routes',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('notes', sa.String(length=1000), nullable=False),
    sa.Column('length', sa.Float(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('route_id')
    )
    op.create_table('driver_assignments',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('driver_id', sa.Uuid(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('driver_assignment_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.PrimaryKeyConstraint('driver_assignment_id')
    )
    op.create_table('driver_history',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('driver_id', sa.Uuid(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('km', sa.Float(), nullable=False),
    sa.Column('driver_history_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.PrimaryKeyConstraint('driver_history_id')
    )
    op.create_index(op.f('ix_driver_history_driver_id'), 'driver_history', ['driver_id'], unique=False)
    op.create_table('jobs',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('route_group_id', sa.Uuid(), nullable=True),
    sa.Column('progress', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='progressenum'), nullable=False),
    sa.Column('job_id', sa.Uuid(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['route_group_id'], ['route_groups.route_group_id'], ),
    sa.PrimaryKeyConstraint('job_id')
    )
    op.create_table('locations',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('location_group_id', sa.Uuid(), nullable=True),
    sa.Column('is_school', sa.Boolean(), nullable=False),
    sa.Column('school_name', sa.String(), nullable=True),
    sa.Column('contact_name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('halal', sa.Boolean(), nullable=False),
    sa.Column('dietary_restrictions', sa.String(), nullable=True),
    sa.Column('num_children', sa.Integer(), nullable=True),
    sa.Column('num_boxes', sa.Integer(), nullable=False),
    sa.Column('notes', sa.String(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['location_group_id'], ['location_groups.location_group_id'], ),
    sa.PrimaryKeyConstraint('location_id')
    )
    op.create_table('route_group_memberships',
    sa.Column('route_group_id', sa.Uuid(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('route_group_membership_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['route_group_id'], ['route_groups.route_group_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.PrimaryKeyConstraint('route_group_membership_id')
    )
    op.create_table('route_stops',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=False),
    sa.Column('stop_number', sa.Integer(), nullable=False),
    sa.Column('route_stop_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.location_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.PrimaryKeyConstraint('route_stop_id')
    )
    op.drop_index(op.f('ix_users_auth_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.alter_column('entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('entities', 'enum_field',
               existing_type=postgresql.ENUM('A', 'B', 'C', 'D', name='entityenum'),
               nullable=True)
    op.alter_column('entities', 'string_array_field',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('route_groups', 'notes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('route_groups', 'drive_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.drop_column('route_groups', 'num_routes')
    op.alter_column('simple_entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_entities', 'enum_field',
               existing_type=postgresql.ENUM('A', 'B', 'C', 'D', name='simpleentityenum'),
               nullable=True)
    op.alter_column('simple_entities', 'string_array_field',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('simple_entities', 'string_array_field',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('simple_entities', 'enum_field',
               existing_type=postgresql.ENUM('A', 'B', 'C', 'D', name='simpleentityenum'),
               nullable=False)
    op.alter_column('simple_entities', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_entities', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.add_column('route_groups', sa.Column('num_routes', sa.INTEGER(), autoincrement=False, nullable=False))
    op.alter_column('route_groups', 'drive_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('route_groups', 'notes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('entities', 'string_array_field',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('entities', 'enum_field',
               existing_type=postgresql.ENUM('A', 'B', 'C', 'D', name='entityenum'),
               nullable=False)
    op.alter_column('entities', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('entities', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('auth_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('User', 'Admin', name='roleenum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_auth_id'), 'users', ['auth_id'], unique=True)
    op.drop_table('route_stops')
    op.drop_table('route_group_memberships')
    op.drop_table('locations')
    op.drop_table('jobs')
    op.drop_index(op.f('ix_driver_history_driver_id'), table_name='driver_history')
    op.drop_table('driver_history')
    op.drop_table('driver_assignments')
    op.drop_table('routes')
    op.drop_index(op.f('ix_location_groups_name'), table_name='location_groups')
    op.drop_table('location_groups')
    op.drop_index(op.f('ix_drivers_email'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_driver_id'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_auth_id'), table_name='drivers')
    op.drop_table('drivers')
    op.drop_table('admin_info')
    # ### end Alembic commands ###
